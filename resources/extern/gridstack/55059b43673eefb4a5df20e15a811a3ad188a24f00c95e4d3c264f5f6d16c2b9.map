{"version":3,"sources":["jsdelivr-header.js","/npm/gridstack@2.0.0/src/gridstack.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,qJCCA,QAAA,uBAEA,MAAA,mBAAA,QAAA,sBACA,QAAA,QAAA,WAEA,eAAA,QAAA,kBAIA,SAAA,QAAA,YACA,SAAA,QAAA,uBACA,SAAA,QAAA,mBAGA,QAAA,8BACA,SAAA,QAAA,+BAoCA,MAAa,UA8FX,YAAmB,EAAqB,EAAyB,IAXzD,KAAA,gBAAkB,GA4nDlB,KAAA,aAAe,QAAA,SAAS,KAAM,UAAU,UAAU,OAAQ,eAAgB,SAAU,UAEpF,KAAA,UAAY,QAAA,SAAS,KAAM,UAAU,UAAU,OAAQ,YAAa,SAAU,UAE9E,KAAA,cAAiB,QAAA,SAAS,KAAM,mBAAA,gBAAgB,UAAU,OAAQ,gBAAiB,SAAU,UApnDnG,KAAK,GAAK,EACV,EAAO,GAAQ,GAEf,QAAA,aAAa,EAAM,QAAS,SAAU,UACtC,QAAA,aAAa,EAAM,SAAU,SAAU,UACvC,QAAA,aAAa,EAAM,iBAAkB,SAAU,QAC/C,QAAA,gBAAgB,EAAM,qBAAsB,SAAU,uCAGtD,QAAA,aAAa,KAAK,GAAI,gBAAiB,iBAAkB,UACzD,QAAA,aAAa,KAAK,GAAI,iBAAkB,kBAAmB,UAC3D,QAAA,aAAa,KAAK,GAAI,yBAA0B,sBAAuB,UAGnE,EAAK,MACP,EAAK,OAAS,EAAK,OAAS,EAAK,WAC1B,EAAK,KAEd,IAAI,EAAU,QAAA,MAAM,SAAS,EAAG,aAAa,gBAGzC,EAA6B,CAC/B,OAAQ,QAAA,MAAM,SAAS,EAAG,aAAa,oBAAsB,GAC7D,OAAQ,IAAoB,QAAA,MAAM,SAAS,EAAG,aAAa,qBAAuB,GAClF,OAAQ,IAAoB,QAAA,MAAM,SAAS,EAAG,aAAa,qBAAuB,GAClF,UAAW,kBACX,iBAAkB,yBAClB,gBAAiB,GACjB,OAAQ,2BACR,YAAa,KACb,aAAa,EACb,WAAY,OACZ,OAAQ,GACR,MAAM,EACN,SAAU,IACV,OAAO,EACP,YAAY,EACZ,OAAQ,wBAA0C,IAAhB,KAAK,UAAkB,QAAQ,GACjE,QAAS,QAAA,MAAM,OAAO,EAAG,aAAa,sBAAuB,EAC7D,wBAAwB,EACxB,UAAW,CACT,UAAY,EAAK,uBACjB,QAAS,MAEX,UAAW,CACT,QAAS,EAAK,YAAc,IAAM,EAAK,YAAe,EAAK,OAAS,EAAK,OAAS,KAAQ,2BAC1F,QAAQ,EACR,SAAU,QAEZ,YAAQ,EACR,cAAgB,CACd,OAAQ,UACR,OAAQ,2BACR,QAAQ,EACR,SAAU,QAEZ,aAAa,EACb,eAAe,EACf,IAAK,OACL,WAAW,EACX,iBAAkB,CAChB,OAAQ,KAAO,EAAK,WAAa,oBAEnC,cAAe,IACf,WAAY,KACZ,eAAgB,KAChB,sBAAsB,EACtB,sBAAsB,GA2BxB,GAxBA,KAAK,KAAO,QAAA,MAAM,SAAS,EAAM,GACjC,KAAK,cAEsB,IAAvB,KAAK,KAAK,SACZ,KAAK,KAAK,SAAW,eAAA,iBACW,IAAvB,KAAK,KAAK,WACnB,KAAK,KAAK,SAAW,eAAA,YAAY,OAEnC,KAAK,GAAK,IAAK,KAAK,KAAK,SAAgC,MAEnC,SAAlB,KAAK,KAAK,MACZ,KAAK,KAAK,IAA6B,QAAvB,EAAG,MAAM,WAGvB,KAAK,KAAK,KACZ,KAAK,GAAG,UAAU,IAAI,kBAGxB,KAAK,KAAK,UAA8D,OAAlD,QAAA,MAAM,eAAe,KAAK,GAAI,EAAK,WACrD,KAAK,KAAK,WACZ,KAAK,GAAG,UAAU,IAAI,qBAGxB,KAAK,kBAA8C,SAAzB,KAAK,KAAK,WAChC,KAAK,kBAAmB,CAE1B,IAAI,GAAgB,KAAK,KAAK,YAA0B,KAAK,KAAK,WAC7D,KAAK,KAAK,UAAwB,KAAK,KAAK,aACjD,KAAK,WAAW,KAAK,YAAc,GAAY,QAE/C,KAAK,WAAW,KAAK,KAAK,YAAY,GAyBxC,GAtBA,KAAK,GAAG,UAAU,IAAI,KAAK,KAAK,QAEhC,KAAK,kBAEL,KAAK,cAEL,KAAK,OAAS,IAAI,mBAAA,gBAAgB,KAAK,KAAK,OAAQ,CAAC,EAAS,GAAY,KACxE,IAAI,EAAY,EAChB,KAAK,OAAO,MAAM,QAAQ,IAAO,EAAY,KAAK,IAAI,EAAW,EAAE,EAAI,EAAE,UACzE,EAAQ,QAAQ,IACd,IAAI,EAAK,EAAE,GACP,GAAuB,OAAV,EAAE,IACb,GAAM,EAAG,YAAc,EAAG,WAAW,YAAY,GAErD,KAAK,YAAY,EAAI,EAAE,EAAG,EAAE,EAAG,EAAE,MAAO,EAAE,UAG9C,KAAK,cAAc,EAAY,KAEjC,KAAK,KAAK,MACV,KAAK,KAAK,QAEN,KAAK,KAAK,KAAM,CAClB,IAAI,EAA2C,GAC/C,KAAK,eAAe,QAAQ,IAC1B,IAAI,EAAI,SAAS,EAAG,aAAa,cAC7B,EAAI,SAAS,EAAG,aAAa,cACjC,EAAS,KAAK,CACZ,GAAA,EAEA,GAAI,OAAO,MAAM,GAAK,IAAO,IAAM,OAAO,MAAM,GAAK,IAAO,GAAK,KAAK,KAAK,WAG/E,EAAS,KAAK,GAAK,EAAE,GAAG,QAAQ,IAAU,KAAK,gBAAgB,EAAK,MAEtE,KAAK,OAAO,cAEZ,KAAK,aAAa,KAAK,KAAK,SAE5B,IAAI,EAAmB,SAAS,cAAc,OAC9C,EAAiB,UAAY,sBAC7B,EAAiB,UAAY,KAAK,KAAK,gBACvC,KAAK,YAAc,SAAS,cAAc,OAC1C,KAAK,YAAY,UAAU,IAAI,KAAK,KAAK,iBAAkB,KAAK,KAAK,WACrE,KAAK,YAAY,YAAY,GAE7B,KAAK,yBAEL,OAAO,iBAAiB,SAAU,KAAK,iBAAiB,KAAK,OAC7D,KAAK,mBAEL,KAAK,eACL,KAAK,mBACL,KAAK,qBA5OA,YAAY,EAA4B,GAAI,EAA+B,eAChF,IAAI,EAAK,UAAU,eAAe,GAClC,OAAK,GASA,EAAG,YACN,EAAG,UAAY,IAAI,UAAU,EAAI,QAAA,MAAM,MAAM,KAExC,EAAG,YAXkB,iBAAf,EACT,QAAQ,IAAI,gEAAkE,EAAa,uFAG3F,QAAQ,IAAI,oDAEP,MAiBJ,eAAe,EAA4B,GAAI,EAAW,eAC/D,IAAI,EAAqB,GAWzB,OAVA,UAAU,gBAAgB,GAAU,QAAQ,IACrC,EAAG,YACN,EAAG,UAAY,IAAI,UAAU,EAAI,QAAA,MAAM,MAAM,KAE/C,EAAM,KAAK,EAAG,aAEK,IAAjB,EAAM,QACR,QAAQ,IAAI,mEAAqE,EAAW,uFAGvF,EAwNF,UAAU,EAAsB,GAGrC,GAAI,UAAU,OAAS,EAAG,CACxB,QAAQ,KAAK,gIAEb,IAAI,EAAI,UAAW,EAAI,EACrB,EAAuB,CAAE,EAAE,EAAE,KAAM,EAAE,EAAE,KAAM,MAAM,EAAE,KAAM,OAAO,EAAE,KAAM,aAAa,EAAE,KACvF,SAAS,EAAE,KAAM,SAAS,EAAE,KAAM,UAAU,EAAE,KAAM,UAAU,EAAE,KAAM,GAAG,EAAE,MAC/E,OAAO,KAAK,UAAU,EAAI,GAG5B,GAAkB,iBAAP,EAAiB,CAC1B,IAAI,EAAM,SAAS,eAAe,qBAClC,EAAI,KAAK,UAAY,EACrB,EAAK,EAAI,KAAK,SAAS,GAKzB,GAAI,EAAS,CAEX,IAAI,EAAU,KAAK,UAAU,GAC7B,QAAA,MAAM,SAAS,EAAS,GACxB,KAAK,OAAO,YAAY,GACxB,KAAK,WAAW,EAAI,GAItB,OADA,KAAK,GAAG,YAAY,GACb,KAAK,WAAW,GAIlB,OAA4B,OAAO,KAAK,OAAO,OAY/C,KAAK,EAA2B,GAAwE,GAC7G,IAAI,EAAQ,UAAU,MAAM,KAAK,GAC7B,EAA2B,GAG/B,GAFA,KAAK,cAED,EAAc,CACA,IAAI,KAAK,OAAO,OACtB,QAAQ,IACL,EAAM,KAAK,GAAK,EAAE,KAAO,EAAE,MAEP,mBAAnB,EACR,EAAa,GAAG,IAEhB,EAAQ,KAAK,GACb,KAAK,aAAa,EAAE,IAAI,GAAM,OAMtC,EAAM,QAAQ,IACZ,IAAI,EAAO,KAAK,OAAO,MAAM,KAAK,GAAK,EAAE,KAAO,EAAE,IAC9C,EACF,KAAK,OAAO,EAAK,GAAI,EAAE,EAAG,EAAE,EAAG,EAAE,MAAO,EAAE,QACjC,IACoB,mBAAnB,EACR,EAAa,GAAG,GAEhB,KAAK,UAAU,yDAA0D,MAI/E,KAAK,OAAO,aAAe,EAC3B,KAAK,SAMA,cAEL,OADA,KAAK,OAAO,cACL,KAMF,gBACL,GAAI,KAAK,KAAK,YAAuC,SAAzB,KAAK,KAAK,WACpC,OAAO,KAAK,KAAK,WAInB,IAAI,EAAK,KAAK,GAAG,cAAc,IAAM,KAAK,KAAK,WAC3C,EAAS,QAAA,MAAM,SAAS,EAAG,aAAa,mBAC5C,OAAO,KAAK,MAAM,EAAG,aAAe,GAc/B,WAAW,EAAqB,GAAS,GAC9C,IAAI,EAAO,QAAA,MAAM,YAAY,GAC7B,OAAI,KAAK,KAAK,iBAAmB,EAAK,MAAQ,KAAK,KAAK,aAAe,EAAK,OACnE,MAET,KAAK,KAAK,eAAiB,EAAK,KAChC,KAAK,KAAK,WAAa,EAAK,OAExB,GACF,KAAK,gBAEA,MAMF,YACL,OAAO,KAAK,GAAG,YAAc,KAAK,KAAK,OAMlC,SAKL,OAJA,KAAK,OAAO,SACZ,KAAK,sBACL,KAAK,mBACL,KAAK,sBACE,KAIF,UAGL,OAFA,KAAK,OAAO,UACZ,KAAK,sBACE,KAWF,OAAO,EAAgB,GAC5B,GAAI,KAAK,KAAK,SAAW,EAAU,OAAO,KAC1C,IAAI,EAAY,KAAK,KAAK,OAc1B,GAVe,IAAX,EACF,KAAK,YAAc,SAEZ,KAAK,YAGd,KAAK,GAAG,UAAU,OAAO,cAAgB,GACzC,KAAK,GAAG,UAAU,IAAI,cAAgB,GACtC,KAAK,KAAK,OAAS,KAAK,OAAO,OAAS,GAEjB,IAAnB,EAA2B,OAAO,KAGtC,IAAI,OAA4B,EAYhC,OAXe,IAAX,GAAgB,KAAK,KAAK,uBAC5B,EAAW,GACX,KAAK,eAAe,QAAQ,IACtB,EAAG,eAAiB,EAAS,KAAK,EAAG,iBAEtC,EAAS,SAAU,OAAW,IAErC,KAAK,OAAO,iBAAiB,EAAW,EAAQ,GAGhD,KAAK,qBAAoB,GAClB,KAMF,YACL,OAAO,KAAK,KAAK,OAIZ,eACL,OAAO,MAAM,KAAK,KAAK,GAAG,UACvB,OAAQ,GAAoB,EAAG,QAAQ,IAAM,KAAK,KAAK,aAAe,EAAG,QAAQ,IAAM,KAAK,KAAK,mBAO/F,QAAQ,GAAY,GAYzB,OAXA,OAAO,oBAAoB,SAAU,KAAK,kBAC1C,KAAK,UACA,EAKH,KAAK,GAAG,WAAW,YAAY,KAAK,KAJpC,KAAK,UAAU,GACf,KAAK,GAAG,UAAU,OAAO,KAAK,KAAK,eAC5B,KAAK,GAAG,WAIjB,QAAA,MAAM,iBAAiB,KAAK,kBACrB,KAAK,OACL,KASF,UAIL,OAHA,KAAK,YAAW,GAChB,KAAK,cAAa,GAClB,KAAK,cAAc,WACZ,KASF,SAIL,OAHA,KAAK,YAAW,GAChB,KAAK,cAAa,GAClB,KAAK,cAAc,UACZ,KAUF,WAAW,EAAmB,GAAoB,GAKvD,OAJA,KAAK,eAAe,QAAQ,GAAM,KAAK,QAAQ,EAAI,IAC/C,IACF,KAAK,KAAK,aAAe,GAEpB,KASF,aAAa,EAAmB,GAAoB,GAKzD,OAJA,KAAK,eAAe,QAAQ,GAAM,KAAK,UAAU,EAAI,IACjD,IACF,KAAK,KAAK,eAAiB,GAEtB,KAMF,MAAM,GAUX,OAFA,KAAK,OAAO,MAAQ,EACpB,KAAK,sBACE,KAMF,WACL,OAAO,KAAK,OAAO,MAYd,iBAAiB,EAAyB,GAAiB,GAChE,IAEI,EAFA,EAAM,KAAK,GAAG,wBAIhB,EADE,EACa,CAAC,IAAK,EAAI,IAAM,SAAS,gBAAgB,UAAW,KAAM,EAAI,MAG9D,CAAC,IAAK,KAAK,GAAG,UAAW,KAAM,KAAK,GAAG,YAGxD,IAAI,EAAe,EAAS,KAAO,EAAa,KAC5C,EAAc,EAAS,IAAM,EAAa,IAE1C,EAAe,EAAI,MAAQ,KAAK,KAAK,OACrC,EAAa,EAAI,OAAS,SAAS,KAAK,GAAG,aAAa,wBAE5D,MAAO,CAAC,EAAG,KAAK,MAAM,EAAe,GAAc,EAAG,KAAK,MAAM,EAAc,IAI1E,SACL,OAAO,KAAK,IAAI,KAAK,OAAO,SAAU,KAAK,KAAK,QAU3C,YAAY,EAAW,EAAW,EAAe,GACtD,OAAO,KAAK,OAAO,YAAY,EAAG,EAAG,EAAO,GAQvC,OAAO,EAAuB,GAWnC,OAVA,KAAK,YAAY,GAAK,QAAQ,IAC5B,IAAI,EAAO,EAAG,cACT,IACL,EAAK,OAAU,IAAO,EAClB,EAAK,OACP,EAAG,aAAa,iBAAkB,OAElC,EAAG,gBAAgB,qBAGhB,KAcF,WAAW,GAChB,IAAI,EAAK,KAAK,WAAW,GAKzB,OAJA,KAAK,gBAAgB,GAAI,GACzB,KAAK,yBACL,KAAK,mBACL,KAAK,sBACE,EAQF,SAAS,EAAuB,GAWrC,OAVA,KAAK,YAAY,GAAK,QAAQ,IAC5B,IAAI,EAAO,EAAG,cACT,IACL,EAAK,SAAY,QAAO,EACpB,EACF,EAAG,aAAa,oBAAqB,OAAO,IAE5C,EAAG,gBAAgB,wBAGhB,KAQF,SAAS,EAAuB,GAUrC,OATA,KAAK,YAAY,GAAK,QAAQ,IACjB,EAAG,gBAEV,EACF,EAAG,aAAa,oBAAqB,OAAO,IAE5C,EAAG,gBAAgB,wBAGhB,KAQF,UAAU,EAAuB,GAUtC,OATA,KAAK,YAAY,GAAK,QAAQ,IACjB,EAAG,gBAEV,EACF,EAAG,aAAa,qBAAsB,OAAO,IAE7C,EAAG,gBAAgB,yBAGhB,KAQF,UAAU,EAAuB,GAUtC,OATA,KAAK,YAAY,GAAK,QAAQ,IACjB,EAAG,gBAEV,EACF,EAAG,aAAa,qBAAsB,OAAO,IAE7C,EAAG,gBAAgB,yBAGhB,KAQF,QAAQ,EAAuB,GAapC,OAZA,KAAK,YAAY,GAAK,QAAQ,IAC5B,IAAI,EAAO,EAAG,cACT,IACL,EAAK,QAAW,EACZ,EAAK,QACP,KAAK,GAAG,UAAU,EAAI,WACtB,EAAG,UAAU,OAAO,yBAEpB,KAAK,GAAG,UAAU,EAAI,UACtB,EAAG,UAAU,OAAO,2BAGjB,KASF,KAAK,EAAuB,EAAY,GAO7C,OANA,KAAK,eAAe,EAAK,CAAC,EAAI,KAC5B,OAAW,IAAN,EAAmB,EAAI,EAAK,EACjC,OAAW,IAAN,EAAmB,EAAI,EAAK,EAEjC,KAAK,OAAO,SAAS,EAAM,EAAG,EAAG,EAAK,MAAO,EAAK,UAE7C,KAoBF,GAAG,EAAsB,GAE9B,IAA2B,IAAvB,EAAK,QAAQ,KAAa,CAG5B,OAFY,EAAK,MAAM,KACjB,QAAQ,GAAQ,KAAK,GAAG,EAAM,IAC7B,KAGT,GAAa,WAAT,GAA8B,UAAT,GAA6B,YAAT,GAA+B,WAAT,GAA8B,YAAT,EAAoB,CAE1G,IAAI,EAAmB,WAAT,GAA8B,YAAT,EAEjC,KAAK,gBAAgB,GADnB,EAC4B,GAAiB,EAAS,GAE1B,GAAuB,EAAS,EAAO,EAAM,QAE7E,KAAK,GAAG,iBAAiB,EAAM,KAAK,gBAAgB,QAClC,cAAT,GAAiC,aAAT,GAAgC,gBAAT,GAAmC,eAAT,GAAkC,YAAT,EAG3G,KAAK,gBAAgB,GAAQ,EAE7B,QAAQ,IAAI,gBAAkB,EAAO,yBAEvC,OAAO,KAOF,IAAI,GAET,IAA2B,IAAvB,EAAK,QAAQ,KAAa,CAG5B,OAFY,EAAK,MAAM,KACjB,QAAQ,GAAQ,KAAK,IAAI,IACxB,KAWT,MARa,WAAT,GAA8B,UAAT,GAA6B,YAAT,GAA+B,WAAT,GAA8B,YAAT,GAElF,KAAK,gBAAgB,IACvB,KAAK,GAAG,oBAAoB,EAAM,KAAK,gBAAgB,WAGpD,KAAK,gBAAgB,GAErB,KASF,aAAa,EAAuB,GAAY,EAAM,GAAe,GAwB1E,OAvBA,KAAK,YAAY,GAAK,QAAQ,IAC5B,GAAI,EAAG,gBAAkB,KAAK,GAAI,OAClC,IAAI,EAAO,EAAG,cAET,IACH,EAAO,KAAK,OAAO,MAAM,KAAK,GAAK,IAAO,EAAE,KAEzC,WAGE,EAAG,cACV,KAAK,GAAG,UAAU,EAAI,WAAW,UAAU,EAAI,WAE/C,KAAK,OAAO,WAAW,EAAM,EAAW,GAEpC,GAAa,EAAG,eAClB,EAAG,YAGH,IACF,KAAK,sBACL,KAAK,uBAEA,KAOF,UAAU,GAAY,GAQ3B,OANA,KAAK,OAAO,MAAM,QAAQ,WACjB,EAAE,GAAG,cACZ,KAAK,GAAG,UAAU,EAAE,GAAI,WAAW,UAAU,EAAE,GAAI,aAErD,KAAK,OAAO,UAAU,GACtB,KAAK,sBACE,KASF,OAAO,EAAuB,EAAgB,GAOnD,OANA,KAAK,eAAe,EAAK,CAAC,EAAI,KAC5B,EAAS,GAAS,EAAK,MACvB,EAAU,GAAU,EAAK,OAEzB,KAAK,OAAO,SAAS,EAAM,EAAK,EAAG,EAAK,EAAG,EAAO,KAE7C,KAQF,UAAU,EAAuB,GAWtC,OAVA,KAAK,YAAY,GAAK,QAAQ,IAC5B,IAAI,EAAO,EAAG,cACT,IACL,EAAK,UAAa,EACd,EAAK,SACP,KAAK,GAAG,UAAU,EAAI,WAEtB,KAAK,GAAG,UAAU,EAAI,aAGnB,KAOF,aAAa,GAMlB,OALI,EACF,KAAK,GAAG,UAAU,IAAI,sBAEtB,KAAK,GAAG,UAAU,OAAO,sBAEpB,KAOF,UAAU,GAKf,OAJA,KAAK,KAAK,YAA8B,IAAhB,EACxB,KAAK,YAAY,GACjB,KAAK,cAAc,GACnB,KAAK,kBACE,KAWF,OAAO,EAAuB,EAAY,EAAY,EAAgB,GAS3E,OARA,KAAK,eAAe,EAAK,CAAC,EAAI,KAC5B,OAAW,IAAN,EAAmB,EAAI,EAAK,EACjC,OAAW,IAAN,EAAmB,EAAI,EAAK,EACjC,EAAS,GAAS,EAAK,MACvB,EAAU,GAAU,EAAK,OAEzB,KAAK,OAAO,SAAS,EAAM,EAAG,EAAG,EAAO,KAEnC,KAQF,OAAO,GACZ,IAAI,EAAO,QAAA,MAAM,YAAY,GAC7B,GAAI,KAAK,KAAK,aAAe,EAAK,MAAQ,KAAK,KAAK,SAAW,EAAK,OAWpE,OARA,KAAK,KAAK,WAAa,EAAK,KAC5B,KAAK,KAAK,UACV,KAAK,KAAK,aACV,KAAK,KAAK,WACV,KAAK,KAAK,YACV,KAAK,KAAK,OAAS,EAAK,OACxB,KAAK,gBAEE,KAIF,YAAsB,OAAO,KAAK,KAAK,OAmBvC,UAAU,EAAW,EAAW,EAAe,EAAgB,GACpE,OAAO,KAAK,OAAO,+BAA+B,CAAC,EAAA,EAAG,EAAA,EAAG,MAAA,EAAO,OAAA,EAAQ,aAAA,IAIlE,oBAAoB,GAC1B,GAAI,KAAK,OAAO,UAAa,OAAO,KACpC,IAAI,EAAW,KAAK,OAAO,eAAc,GAQzC,OAPI,GAAY,EAAS,SAClB,GACH,KAAK,OAAO,mBAAmB,GAEjC,KAAK,cAAc,SAAU,IAE/B,KAAK,OAAO,cACL,KAID,mBACN,OAAI,KAAK,OAAO,UAAoB,MAChC,KAAK,OAAO,YAAc,KAAK,OAAO,WAAW,OAAS,IAC5D,KAAK,OAAO,mBAAmB,KAAK,OAAO,YAE3C,KAAK,OAAO,WAAW,QAAQ,WAAc,EAAE,SAC/C,KAAK,cAAc,QAAS,KAAK,OAAO,YACxC,KAAK,OAAO,WAAa,IAEpB,MAID,sBACN,OAAI,KAAK,OAAO,UAAoB,MAChC,KAAK,OAAO,cAAgB,KAAK,OAAO,aAAa,OAAS,IAChE,KAAK,cAAc,UAAW,KAAK,OAAO,cAC1C,KAAK,OAAO,aAAe,IAEtB,MAID,cAAc,EAAc,GAClC,IAAI,EAAQ,EAAO,IAAI,YAAY,EAAM,CAAC,SAAS,EAAO,OAAQ,IAAS,IAAI,MAAM,GAErF,OADA,KAAK,GAAG,cAAc,GACf,KAID,cACF,KAAK,WACP,QAAA,MAAM,iBAAiB,KAAK,WAE9B,KAAK,UAAY,oBAAsC,IAAhB,KAAK,UAAmB,UAE/D,IAAI,EAAgB,KAAK,KAAK,iBAAc,EAAY,KAAK,GAAG,WAKhE,OAJA,KAAK,QAAU,QAAA,MAAM,iBAAiB,KAAK,UAAW,GACjC,OAAjB,KAAK,UACP,KAAK,QAAQ,KAAO,GAEf,KAID,cAAc,GACpB,IAAK,KAAK,QACR,OAAO,KAOT,QALkB,IAAd,IACF,EAAY,KAAK,QAAQ,MAE3B,KAAK,cACL,KAAK,0BACA,KAAK,KAAK,WACb,OAAO,KAET,GAA0B,IAAtB,KAAK,QAAQ,MAAc,GAAa,KAAK,QAAQ,KACvD,OAAO,KAET,IAAI,EAAa,KAAK,KAAK,WACvB,EAAiB,KAAK,KAAK,eAC3B,MAAa,KAAK,KAAK,aAAa,KAAK,KAAK,YAGlD,GAA0B,IAAtB,KAAK,QAAQ,KAAY,CAC3B,QAAA,MAAM,WAAW,KAAK,QAAS,iBAAuB,IAAa,KAEnE,IAAI,EAAc,KAAK,KAAK,UAAY,KAAK,KAAK,WAC9C,EAAiB,KAAK,KAAK,aAAe,KAAK,KAAK,WACpD,EAAgB,KAAK,KAAK,YAAc,KAAK,KAAK,WAClD,EAAe,KAAK,KAAK,WAAa,KAAK,KAAK,WAChD,KAAa,+BACb,MAAkB,KAAK,KAAK,0DAChC,QAAA,MAAM,WAAW,KAAK,QAAS,UAAiB,aAAe,cAAkB,YAAiB,MAClG,QAAA,MAAM,WAAW,KAAK,QAAS,UAAqB,aAAe,cAAkB,YAAiB,MAEtG,QAAA,MAAM,WAAW,KAAK,WAAY,iCAAuC,KACzE,QAAA,MAAM,WAAW,KAAK,WAAY,gCAAsC,KACxE,QAAA,MAAM,WAAW,KAAK,WAAY,iCAAuC,cAAkB,KAC3F,QAAA,MAAM,WAAW,KAAK,WAAY,gCAAsC,KACxE,QAAA,MAAM,WAAW,KAAK,WAAY,+BAAqC,KACvE,QAAA,MAAM,WAAW,KAAK,WAAY,gCAAsC,cAAiB,KAG3F,GAAI,EAAY,KAAK,QAAQ,KAAM,CACjC,IAAI,EAAa,GAA0B,EAAa,EAAQ,EAChE,IAAK,IAAI,EAAI,KAAK,QAAQ,KAAO,EAAG,GAAK,EAAW,IAAK,CACvD,IAAI,EAAiB,EAAU,GAC/B,QAAA,MAAM,WAAW,KAAK,WAAY,gBAAqB,EAAE,cAAsB,EAAU,EAAE,MAC3F,QAAA,MAAM,WAAW,KAAK,WAAY,qBAA0B,iBAAsB,KAClF,QAAA,MAAM,WAAW,KAAK,WAAY,yBAA8B,qBAAsB,KACtF,QAAA,MAAM,WAAW,KAAK,WAAY,yBAA8B,qBAAsB,KAExF,KAAK,QAAQ,KAAO,EAEtB,OAAO,KAID,yBACN,GAAI,KAAK,OAAO,UAAa,OAAO,KACpC,IAAI,EAAM,KAAK,SAEX,EAAe,SAAS,iBAAiB,KAAK,IAAI,eACtD,GAAI,EAAe,EAAG,CACpB,IAAI,EAAU,KAAK,MAAM,EAAe,KAAK,iBACzC,EAAM,IACR,EAAM,GAIV,GADA,KAAK,GAAG,aAAa,sBAAuB,OAAO,IACvC,IAAR,EAEF,OADA,KAAK,GAAG,MAAM,eAAe,UACtB,KAET,IAAI,EAAa,KAAK,KAAK,WACvB,EAAO,KAAK,KAAK,eACrB,OAAK,GACL,KAAK,GAAG,MAAM,OAAS,EAAM,EAAa,EACnC,MAFmB,KAMpB,sBAAsB,GAC5B,IAAI,EAAO,EAAG,cACd,OAAK,IAAQ,EAAK,gBAAmB,KAAK,KAAK,WAC/C,EAAK,eAAiB,WAAW,KAC/B,EAAG,UAAU,IAAI,4BACjB,EAAK,kBAAmB,GACvB,KAAK,KAAK,eACN,MAL0D,KAS3D,sBAAsB,GAC5B,IAAI,EAAO,EAAG,cACd,OAAK,GAAS,EAAK,gBACnB,aAAa,EAAK,uBACX,EAAK,eACZ,EAAG,UAAU,OAAO,mCACb,EAAK,iBACL,MALmC,KASpC,uBAAuB,GAE7B,IAAI,EACA,EACA,EAAK,EAAK,GAGV,EAAgB,CAAC,EAAO,KAEtB,KAAK,gBAAgB,EAAM,OAC7B,KAAK,gBAAgB,EAAM,MAAM,EAAO,EAAM,QAGhD,KAAK,OAAO,aACZ,KAAK,OAAO,YAAY,GACxB,EAAY,KAAK,YACjB,EAAa,KAAK,gBAElB,IAAI,OAAE,GAAW,EAEjB,KAAK,YAAY,aAAa,YAAa,EAAO,aAAa,cAC/D,KAAK,YAAY,aAAa,YAAa,EAAO,aAAa,cAC/D,KAAK,YAAY,aAAa,gBAAiB,EAAO,aAAa,kBACnE,KAAK,YAAY,aAAa,iBAAkB,EAAO,aAAa,mBACpE,KAAK,GAAG,OAAO,KAAK,aAEpB,EAAK,GAAK,KAAK,YACf,EAAK,aAAe,EAAK,EACzB,EAAK,aAAe,EAAK,EACzB,EAAK,UAAY,EAAG,SAAS,IAC7B,IAAI,EAAa,EAAK,WAAa,EAMnC,GAHA,KAAK,GAAG,UAAU,EAAI,SAAU,WAAY,GAAa,EAAK,UAAY,IAC1E,KAAK,GAAG,UAAU,EAAI,SAAU,YAAa,EAAa,GAEvC,gBAAf,EAAM,KAAwB,CAChC,IAAI,EAAc,EAAO,cAAc,oBACvC,GAAI,EAAa,CACN,SAAS,YAAY,cAC3B,UAAU,eAAe,GAAM,GAClC,EAAY,cAAc,MAM5B,EAAe,CAAC,EAAc,KAChC,IAEI,EACA,EAHA,EAAI,KAAK,MAAM,EAAG,SAAS,KAAO,GAClC,EAAI,KAAK,OAAO,EAAG,SAAS,IAAM,EAAa,GAAK,GAIxD,GAAmB,SAAf,EAAM,KAAiB,CACzB,IAAI,EAAW,EAAG,SAAS,IAAM,EAAK,UAGtC,GAFA,EAAK,UAAY,EAAG,SAAS,IAC7B,QAAA,MAAM,qBAAqB,EAAI,EAAG,SAAU,GACxC,EAAG,QAAQ,aAAe,EAAI,GAAK,GAAK,KAAK,OAAO,QAAU,EAAI,IAClE,KAAK,OAAO,OAAS,EAAI,KAAK,OAAO,SAAW,CAClD,GAAK,EAAK,kBAcR,QAb4B,IAAxB,KAAK,KAAK,WACZ,KAAK,sBAAsB,GAG7B,EAAI,EAAK,aACT,EAAI,EAAK,aAEL,KAAK,YAAY,aAAe,KAAK,IAAM,KAAK,GAAG,YAAY,KAAK,aACxE,KAAK,OAAO,WAAW,GACvB,KAAK,yBAEL,EAAK,mBAAoB,OAK3B,KAAK,sBAAsB,GAEvB,EAAK,oBACP,KAAK,OAAO,QAAQ,GACpB,KAAK,YAAY,KAAK,YAAa,EAAG,EAAG,EAAO,GAChD,KAAK,GAAG,YAAY,KAAK,aACzB,EAAK,GAAK,KAAK,mBACR,EAAK,wBAGX,GAAmB,WAAf,EAAM,KAAoB,CACnC,GAAI,EAAI,EAAG,OACX,EAAQ,KAAK,MAAM,EAAG,KAAK,MAAQ,GACnC,EAAS,KAAK,OAAO,EAAG,KAAK,OAAS,KAAK,aAAe,GAG5D,IAAI,EAAmB,GAAS,EAAK,gBACjC,EAAoB,GAAU,EAAK,kBAClC,KAAK,OAAO,YAAY,EAAM,EAAG,EAAG,EAAO,IAC7C,EAAK,cAAgB,GAAK,EAAK,cAAgB,GAChD,EAAK,kBAAoB,GAAmB,EAAK,mBAAqB,IAGxE,EAAK,YAAc,EACnB,EAAK,YAAc,EACnB,EAAK,gBAAkB,EACvB,EAAK,iBAAmB,EACxB,KAAK,OAAO,SAAS,EAAM,EAAG,EAAG,EAAO,GACxC,KAAK,2BAIH,EAAe,IACb,KAAK,YAAY,aAAe,KAAK,IAAM,KAAK,GAAG,YAAY,KAAK,aAGxE,IAAI,EAA8B,EAAM,OACxC,GAAK,EAAO,eAAiB,EAAO,cAAc,OAAS,KAA3D,CAIA,GAFA,EAAK,GAAK,EAEN,EAAK,iBAAkB,CACzB,IAAI,EAAe,EAAG,cAAc,KAChC,EAAa,gBAAgB,EAAM,OACrC,EAAa,gBAAgB,EAAM,MAAM,EAAO,GAElD,EAAa,OAAO,aAAa,KAAK,GACtC,EAAa,GAAG,UAAU,EAAI,WAAW,UAAU,EAAI,kBAChD,EAAG,cACV,EAAa,sBACT,EAAG,eACL,EAAG,cAGL,KAAK,sBAAsB,GACtB,EAAK,mBAIR,QAAA,MAAM,wBAAwB,GAC9B,KAAK,YAAY,EAAQ,EAAK,aAAc,EAAK,aAAc,EAAK,MAAO,EAAK,QAChF,EAAK,EAAI,EAAK,aACd,EAAK,EAAI,EAAK,oBACP,EAAK,kBACZ,KAAK,OAAO,QAAQ,KARpB,QAAA,MAAM,wBAAwB,GAC9B,KAAK,YAAY,EAAQ,EAAK,EAAG,EAAK,EAAG,EAAK,MAAO,EAAK,SASxD,KAAK,gBAAgB,EAAM,OAC7B,KAAK,gBAAgB,EAAM,MAAM,EAAO,GAI5C,KAAK,yBACL,KAAK,sBAEL,KAAK,OAAO,YAGO,eAAf,EAAM,MACR,EAAO,iBAAiB,eAAe,QAAS,GAAwB,EAAG,UAAU,sBAyBzF,OArBA,KAAK,GACF,UAAU,EAAI,CACb,MAAO,EACP,KAAM,EACN,KAAM,IAEP,UAAU,EAAI,CACb,MAAO,EACP,KAAM,EACN,OAAQ,KAGR,EAAK,QAAU,KAAK,KAAK,aAAe,KAAK,KAAK,aACpD,KAAK,GAAG,UAAU,EAAI,YAGpB,EAAK,UAAY,KAAK,KAAK,eAAiB,KAAK,KAAK,aACxD,KAAK,GAAG,UAAU,EAAI,WAGxB,KAAK,WAAW,EAAI,GACb,KAID,gBAAgB,EAAyB,GAAkB,GACjE,EAAG,UAAU,IAAI,KAAK,KAAK,WAC3B,IAAI,EAAO,KAAK,UAAU,EAAI,CAAE,GAAI,EAAI,KAAM,OAK9C,OAJA,EAAO,KAAK,OAAO,QAAQ,EAAM,GACjC,EAAG,cAAgB,EAEnB,KAAK,uBAAuB,GACrB,KAID,YAAY,EAAiB,EAAY,EAAY,EAAgB,GAK3E,OAJI,MAAA,GAAiC,EAAG,aAAa,YAAa,OAAO,IACrE,MAAA,GAAiC,EAAG,aAAa,YAAa,OAAO,IACrE,GAAS,EAAG,aAAa,gBAAiB,OAAO,IACjD,GAAU,EAAG,aAAa,iBAAkB,OAAO,IAChD,KAID,WAAW,EAAiB,GAClC,OAAK,GACL,KAAK,YAAY,EAAI,EAAK,EAAG,EAAK,EAAG,EAAK,MAAO,EAAK,QAElD,EAAK,aACP,EAAG,aAAa,wBAAyB,QAEzC,EAAG,gBAAgB,yBAGjB,EAAK,UAAY,EAAG,aAAa,oBAAqB,OAAO,EAAK,WAClE,EAAK,UAAY,EAAG,aAAa,oBAAqB,OAAO,EAAK,WAClE,EAAK,WAAa,EAAG,aAAa,qBAAsB,OAAO,EAAK,YACpE,EAAK,WAAa,EAAG,aAAa,qBAAsB,OAAO,EAAK,YACpE,EAAK,SACP,EAAG,aAAa,oBAAqB,QAErC,EAAG,gBAAgB,qBAGjB,EAAK,OACP,EAAG,aAAa,kBAAmB,QAEnC,EAAG,gBAAgB,mBAGjB,EAAK,OACP,EAAG,aAAa,iBAAkB,QAElC,EAAG,gBAAgB,kBAGjB,EAAK,eAAiB,EAAG,aAAa,yBAA0B,EAAK,eACrE,EAAK,IAAM,EAAG,aAAa,aAAc,OAAO,EAAK,KAClD,MAjCW,KAqCZ,UAAU,EAAiB,EAAsB,IAgBvD,OAfA,EAAK,EAAI,QAAA,MAAM,SAAS,EAAG,aAAa,cACxC,EAAK,EAAI,QAAA,MAAM,SAAS,EAAG,aAAa,cACxC,EAAK,MAAQ,QAAA,MAAM,SAAS,EAAG,aAAa,kBAC5C,EAAK,OAAS,QAAA,MAAM,SAAS,EAAG,aAAa,mBAC7C,EAAK,SAAW,QAAA,MAAM,SAAS,EAAG,aAAa,sBAC/C,EAAK,SAAW,QAAA,MAAM,SAAS,EAAG,aAAa,sBAC/C,EAAK,UAAY,QAAA,MAAM,SAAS,EAAG,aAAa,uBAChD,EAAK,UAAY,QAAA,MAAM,SAAS,EAAG,aAAa,uBAChD,EAAK,aAAe,QAAA,MAAM,OAAO,EAAG,aAAa,0BACjD,EAAK,SAAW,QAAA,MAAM,OAAO,EAAG,aAAa,sBAC7C,EAAK,OAAS,QAAA,MAAM,OAAO,EAAG,aAAa,oBAC3C,EAAK,OAAS,QAAA,MAAM,OAAO,EAAG,aAAa,mBAC3C,EAAK,cAAgB,EAAG,aAAa,0BACrC,EAAK,GAAK,EAAG,aAAa,cAEnB,EAID,eAAe,EAAuB,GAC5C,IAAI,EAAK,KAAK,WAAW,GACzB,IAAK,EAAM,OAAO,KAClB,IAAI,EAAO,EAAG,cACd,OAAK,GAEL,KAAK,OAAO,aACZ,KAAK,OAAO,YAAY,GAExB,EAAS,KAAK,KAAM,EAAI,GAExB,KAAK,yBACL,KAAK,sBAEL,KAAK,OAAO,YACL,MAXa,KAed,kBAQN,OAL6B,IAAzB,KAAK,KAAK,WACZ,KAAK,GAAG,UAAU,IAHE,qBAKpB,KAAK,GAAG,UAAU,OALE,qBAOf,KAOD,mBAUN,GARI,KAAK,mBACP,QAAA,MAAM,SAAS,KACb,IAAI,GAAgB,KAAK,KAAK,YAA0B,KAAK,KAAK,WAC7D,KAAK,KAAK,UAAwB,KAAK,KAAK,aACjD,KAAK,WAAW,KAAK,YAAc,IAClC,MAGA,KAAK,KAAK,sBAAwB,KAAK,GAAG,aAAe,KAAK,KAAK,SAAU,CAChF,GAAI,KAAK,eAAkB,OAAO,KAClC,KAAK,gBAAiB,EACtB,KAAK,OAAO,OACP,CACL,IAAK,KAAK,eAAkB,OAAO,YAC5B,KAAK,eACZ,KAAK,OAAO,KAAK,aAEnB,OAAO,KAID,eAMN,OALK,KAAK,KAAK,YAA0C,iBAArB,KAAK,KAAK,QACvC,KAAK,GAAG,YAAY,KAAK,KAAK,SACjC,KAAK,GAAG,OAAO,KAAK,KAAK,OAAQ,KAAK,KAAK,eAGxC,KAID,mBACN,IAAK,KAAK,KAAK,YAA6C,iBAAxB,KAAK,KAAK,UAAwB,CACpE,IAAI,EAAY,SAAS,cAAc,KAAK,KAAK,WACjD,IAAK,EAAW,OAAO,KAClB,KAAK,GAAG,YAAY,IACvB,KAAK,GAAG,UAAU,EAAW,KAAK,KAAK,kBAEzC,KAAK,GACF,GAAG,EAAW,WAAY,CAAC,EAAO,KACjC,IAAI,EAAO,EAAG,cACT,GAAQ,EAAK,OAAS,OAC3B,EAAG,QAAQ,YAAc,OACzB,KAAK,sBAAsB,MAE5B,GAAG,EAAW,UAAW,CAAC,EAAO,KAChC,IAAI,EAAO,EAAG,cACT,GAAQ,EAAK,OAAS,cACpB,EAAG,QAAQ,YAClB,KAAK,sBAAsB,MAGjC,OAAO,KAID,qBACN,GAAI,KAAK,KAAK,aAAe,KAAK,KAAK,cAAe,OAAO,KAE7D,IAAI,EAAS,CAAC,EAAO,KACnB,IAAI,EAAO,EAAG,cACV,EAAM,KAAK,iBAAiB,CAAC,KAAM,EAAM,MAAO,IAAK,EAAM,QAAQ,GACnE,EAAI,KAAK,IAAI,EAAG,EAAI,GACpB,EAAI,KAAK,IAAI,EAAG,EAAI,GACnB,EAAK,OAkBE,IAAM,EAAK,GAAK,IAAM,EAAK,IAAM,KAAK,OAAO,YAAY,EAAM,EAAG,KAC5E,KAAK,OAAO,SAAS,EAAM,EAAG,GAC9B,KAAK,2BAnBL,EAAK,QAAS,EAEd,EAAK,GAAK,EACV,EAAK,EAAI,EACT,EAAK,EAAI,SACF,EAAK,aACZ,KAAK,OAAO,aACZ,KAAK,OAAO,YAAY,GACxB,KAAK,OAAO,QAAQ,GAEpB,KAAK,YAAY,KAAK,YAAa,EAAK,EAAG,EAAK,EAAG,EAAK,MAAO,EAAK,QACpE,KAAK,GAAG,YAAY,KAAK,aACzB,EAAK,GAAK,KAAK,YACf,EAAK,aAAe,EAAK,EACzB,EAAK,aAAe,EAAK,EAEzB,KAAK,2BAsHT,OA/GA,KAAK,GACF,UAAU,KAAK,GAAI,CAClB,OAAS,IACP,IAAI,EAAsB,EAAG,cAC7B,GAAI,GAAQ,EAAK,OAAS,KACxB,OAAO,EAET,GAAuC,mBAA5B,KAAK,KAAK,cACnB,OAAO,KAAK,KAAK,cAAc,GAEjC,IAAI,GAAwC,IAA5B,KAAK,KAAK,cAAyB,mBAAqB,KAAK,KAAK,cAClF,OAAO,EAAG,QAAQ,MAGrB,GAAG,KAAK,GAAI,WAAY,CAAC,EAAO,KAC/B,IAAI,EAAO,EAGP,EAAO,EAAG,cACd,IAAK,IAAS,EAAK,QAAU,EAAK,OAAQ,CACxC,IAAI,EAAI,SAAS,EAAG,aAAa,kBAC7B,EAAI,KAAK,EAAO,GAAQ,IAAS,MAAQ,GAC7C,IAAI,EAAI,SAAS,EAAG,aAAa,mBAC7B,EAAI,KAAK,EAAO,GAAQ,IAAS,OAAS,GAIhD,IAAI,EAAY,KAAK,YACjB,EAAa,KAAK,gBACtB,EAAQ,GAAQ,EAAK,MAAQ,EAAK,MAAQ,KAAK,MAAM,EAAG,YAAc,IAAc,EACpF,EAAS,GAAQ,EAAK,OAAS,EAAK,OAAS,KAAK,MAAM,EAAG,aAAe,IAAe,EAEzF,IAAI,EAAU,KAAK,OAAO,YAAY,CAAC,MAAA,EAAO,OAAA,EAAQ,QAAQ,EAAO,YAAY,IAMjF,OALA,EAAQ,cAAe,EACvB,EAAG,cAAgB,EACnB,EAAG,mBAAqB,EAExB,KAAK,GAAG,GAAG,EAAI,OAAQ,IAChB,IAER,GAAG,KAAK,GAAI,UAAW,CAAC,EAAO,KAG9B,IAAI,EAAO,EAAG,cACd,GAAK,GAAS,EAAK,aAWnB,OARA,KAAK,GAAG,IAAI,EAAI,QAChB,EAAK,GAAK,KACV,KAAK,OAAO,WAAW,GACnB,KAAK,YAAY,aAAe,KAAK,IACvC,KAAK,GAAG,YAAY,KAAK,aAE3B,KAAK,yBACL,EAAG,cAAgB,EAAG,oBACf,IAER,GAAG,KAAK,GAAI,OAAQ,CAAC,EAAO,EAAyB,KACpD,KAAK,YAAY,SAGjB,IAAI,EAAW,EAAG,mBAElB,UADO,EAAG,mBACN,GAAY,EAAS,MAAQ,EAAS,OAAS,KAAM,CACvD,IAAI,EAAQ,EAAS,KACrB,EAAM,YAAY,SAClB,EAAS,GAAK,EACd,EAAM,OAAO,aAAa,KAAK,GAC/B,EAAM,sBAGR,IAAI,EAAsB,EAAG,cAsC7B,OArCA,KAAK,OAAO,YAAY,GACxB,EAAK,KAAO,KACZ,KAAK,GAAG,IAAI,EAAI,QAGZ,IAAW,GACb,EAAO,SACP,EAAG,cAAgB,EACnB,EAAK,EAAG,WAAU,KAElB,EAAG,SACH,KAAK,GACF,UAAU,EAAI,WACd,UAAU,EAAI,YAEnB,EAAG,cAAgB,EACnB,EAAK,GAAK,EAEV,QAAA,MAAM,wBAAwB,GAC9B,KAAK,WAAW,EAAI,GACpB,KAAK,GAAG,YAAY,GACpB,KAAK,yBACL,KAAK,OAAO,WAAW,KAAK,GAC5B,KAAK,mBACL,KAAK,sBAEL,KAAK,OAAO,YACR,KAAK,gBAAyB,SAChC,KAAK,gBAAyB,QAAE,CAAC,KAAM,WAAY,GAAY,EAAS,KAAO,OAAW,EAAW,GAKvG,OAAO,WAAW,KACZ,EAAK,IAAM,EAAK,GAAG,eAAe,KAAK,uBAAuB,MAG7D,IAEJ,KAID,WAAW,EAAwB,oBACzC,MAAuB,iBAAR,EACZ,SAAS,cAAc,IAAQ,SAAS,cAAc,IAAM,IAAQ,SAAS,cAAc,IAAM,GAAQ,EAGtG,YAAY,EAAwB,oBAC1C,GAAmB,iBAAR,EAAkB,CAC3B,IAAI,EAAO,SAAS,iBAAiB,GAGrC,OAFK,EAAK,SAAU,EAAO,SAAS,iBAAiB,IAAM,IACtD,EAAK,SAAU,EAAO,SAAS,iBAAiB,IAAM,IACpD,MAAM,KAAK,GAEpB,MAAO,CAAC,GAGF,sBAAsB,EAA4B,eACxD,MAAuB,iBAAR,EACZ,SAAS,cAAc,IAAQ,SAAS,cAAc,IAAM,IAAQ,SAAS,cAAc,IAAM,GAAQ,EAGtG,uBAAuB,EAA4B,eACzD,GAAmB,iBAAR,EAAkB,CAC3B,IAAI,EAAO,SAAS,iBAAiB,GAGrC,OAFK,EAAK,SAAU,EAAO,SAAS,iBAAiB,IAAM,IACtD,EAAK,SAAU,EAAO,SAAS,iBAAiB,IAAM,IACpD,MAAM,KAAK,GAEpB,MAAO,CAAC,GAIF,aACN,IAAI,EAAO,QAAA,MAAM,YAAY,KAAK,KAAK,QACvC,KAAK,KAAK,WAAa,EAAK,KAC5B,IAAI,EAAS,KAAK,KAAK,OAAS,EAAK,OAmCrC,YAhC4B,IAAxB,KAAK,KAAK,UACZ,KAAK,KAAK,UAAY,GAEtB,EAAO,QAAA,MAAM,YAAY,KAAK,KAAK,WACnC,KAAK,KAAK,UAAY,EAAK,cACpB,KAAK,KAAK,aAGY,IAA3B,KAAK,KAAK,aACZ,KAAK,KAAK,aAAe,GAEzB,EAAO,QAAA,MAAM,YAAY,KAAK,KAAK,cACnC,KAAK,KAAK,aAAe,EAAK,cACvB,KAAK,KAAK,aAGW,IAA1B,KAAK,KAAK,YACZ,KAAK,KAAK,YAAc,GAExB,EAAO,QAAA,MAAM,YAAY,KAAK,KAAK,aACnC,KAAK,KAAK,YAAc,EAAK,cACtB,KAAK,KAAK,aAGU,IAAzB,KAAK,KAAK,WACZ,KAAK,KAAK,WAAa,GAEvB,EAAO,QAAA,MAAM,YAAY,KAAK,KAAK,YACnC,KAAK,KAAK,WAAa,EAAK,cACrB,KAAK,KAAK,QAEnB,KAAK,KAAK,WAAa,EAAK,KACrB,MAjpDK,UAAA,MAAQ,QAAA,MAGR,UAAA,OAAS,mBAAA,gBA5DzB,QAAA,UAAA","file":"/npm/gridstack@2.0.0/dist/gridstack.js","sourceRoot":"","sourcesContent":["/**\n * Minified by jsDelivr using Terser v3.14.1.\n * Original file: /npm/gridstack@2.0.0/dist/gridstack.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n","// gridstack.ts 2.0.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\nimport './gridstack-poly.js';\r\n\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { obsoleteOpts, obsoleteOptsDel, obsoleteAttr, obsolete, Utils } from './utils';\r\nimport { GridItemHTMLElement, GridStackWidget, GridStackNode, GridstackOptions, numberOrString } from './types';\r\nimport { GridStackDD } from './gridstack-dd';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-dd';\r\n\r\n// TEMPORARY import the jquery-ui drag&drop since we don't have alternative yet and don't expect users to create their own yet\r\nimport './jq/gridstack-dd-jqueryui';\r\nexport * from './jq/gridstack-dd-jqueryui';\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resizestart' | 'resizestop';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridstackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.log('gridstack.js: init() no grid was found. Did you forget class ' + elOrString + ' on your element ?' +\r\n        '\\n\".grid-stack\" is required for proper CSS styling and drag/drop.');\r\n      } else {\r\n        console.log('gridstack.js: init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.clone(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridstackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.clone(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.log('gridstack.js: initAll() no grid was found. Did you forget class ' + selector + ' on your element ?' +\r\n      '\\n\".grid-stack\" is required for proper CSS styling and drag/drop.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridstackOptions;\r\n\r\n  /** current drag&drop plugin being used */\r\n  public dd: GridStackDD;\r\n\r\n  /** @internal */\r\n  private placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _oneColumnMode: boolean;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _stylesId: string;\r\n  /** @internal */\r\n  private _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridstackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    obsoleteOpts(opts, 'width', 'column', 'v0.5.3');\r\n    obsoleteOpts(opts, 'height', 'maxRow', 'v0.5.3');\r\n    obsoleteOpts(opts, 'verticalMargin', 'margin', 'v2.0');\r\n    obsoleteOptsDel(opts, 'oneColumnModeClass', 'v0.6.3', '. Use class `.grid-stack-1` instead');\r\n\r\n    // container attributes\r\n    obsoleteAttr(this.el, 'data-gs-width', 'data-gs-column', 'v0.5.3');\r\n    obsoleteAttr(this.el, 'data-gs-height', 'data-gs-max-row', 'v0.5.3');\r\n    obsoleteAttr(this.el, 'data-gs-current-height', 'data-gs-current-row', 'v1.0.0');\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('data-gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridstackOptions = {\r\n      column: Utils.toNumber(el.getAttribute('data-gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('data-gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('data-gs-max-row')) || 0,\r\n      itemClass: 'grid-stack-item',\r\n      placeholderClass: 'grid-stack-placeholder',\r\n      placeholderText: '',\r\n      handle: '.grid-stack-item-content',\r\n      handleClass: null,\r\n      styleInHead: false,\r\n      cellHeight: 'auto',\r\n      margin: 10,\r\n      auto: true,\r\n      minWidth: 768,\r\n      float: false,\r\n      staticGrid: false,\r\n      _class: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      animate: Utils.toBool(el.getAttribute('data-gs-animate')) || false,\r\n      alwaysShowResizeHandle: false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      dragIn: undefined,\r\n      dragInOptions : {\r\n        revert: 'invalid',\r\n        handle: '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      disableDrag: false,\r\n      disableResize: false,\r\n      rtl: 'auto',\r\n      removable: false,\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n      removeTimeout: 2000,\r\n      marginUnit: 'px',\r\n      cellHeightUnit: 'px',\r\n      disableOneColumnMode: false,\r\n      oneColumnModeDomSort: false\r\n    };\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    this.initMargin();\r\n\r\n    if (this.opts.ddPlugin === false) {\r\n      this.opts.ddPlugin = GridStackDD;\r\n    } else if (this.opts.ddPlugin === undefined) {\r\n      this.opts.ddPlugin = GridStackDD.get();\r\n    }\r\n    this.dd = new (this.opts.ddPlugin as typeof GridStackDD)(this);\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = el.style.direction === 'rtl';\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    this.opts._isNested = Utils.closestByClass(this.el, opts.itemClass) !== null;\r\n    if (this.opts._isNested) {\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight) {\r\n      // make the cell content square initially (will use resize event to keep it square)\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      this.cellHeight(this.cellWidth() + marginDiff, false);\r\n    } else {\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._class);\r\n\r\n    this._setStaticClass();\r\n\r\n    this._initStyles();\r\n\r\n    this.engine = new GridStackEngine(this.opts.column, (cbNodes, removeDOM = true) => {\r\n      let maxHeight = 0;\r\n      this.engine.nodes.forEach(n => { maxHeight = Math.max(maxHeight, n.y + n.height) });\r\n      cbNodes.forEach(n => {\r\n        let el = n.el;\r\n        if (removeDOM && n._id === null) {\r\n          if (el && el.parentNode) { el.parentNode.removeChild(el) }\r\n        } else {\r\n          this._writeAttrs(el, n.x, n.y, n.width, n.height);\r\n        }\r\n      });\r\n      this._updateStyles(maxHeight + 10);\r\n    },\r\n    this.opts.float,\r\n    this.opts.maxRow);\r\n\r\n    if (this.opts.auto) {\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => {\r\n        let x = parseInt(el.getAttribute('data-gs-x'));\r\n        let y = parseInt(el.getAttribute('data-gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort(e => e.i).forEach(item => { this._prepareElement(item.el) });\r\n    }\r\n    this.engine.saveInitial(); // initial start of items\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    let placeholderChild = document.createElement('div');\r\n    placeholderChild.className = 'placeholder-content';\r\n    placeholderChild.innerHTML = this.opts.placeholderText;\r\n    this.placeholder = document.createElement('div');\r\n    this.placeholder.classList.add(this.opts.placeholderClass, this.opts.itemClass);\r\n    this.placeholder.appendChild(placeholderChild);\r\n\r\n    this._updateContainerHeight();\r\n\r\n    window.addEventListener('resize', this._onResizeHandler.bind(this));\r\n    this._onResizeHandler();\r\n\r\n    this._setupDragIn();\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n  };\r\n\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use willItFit method before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget('<div><div class=\"grid-stack-item-content\">hello</div></div>', {width: 3});\r\n   *\r\n   * @param el html element or string definition to add\r\n   * @param options widget position/size options (optional) - see GridStackWidget\r\n   */\r\n  public addWidget(el: GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget(el, {x, y, width,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], width:a[i++], height:a[i++], autoPosition:a[i++],\r\n          minWidth:a[i++], maxWidth:a[i++], minHeight:a[i++], maxHeight:a[i++], id:a[i++] };\r\n      return this.addWidget(el, opt);\r\n    }\r\n\r\n    if (typeof el === 'string') {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = el;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('data-gs-xyz) before adding the node.\r\n    if (options) {\r\n      // make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n      let domAttr = this._readAttr(el);\r\n      Utils.defaults(options, domAttr);\r\n      this.engine.prepareNode(options);\r\n      this._writeAttr(el, options);\r\n    }\r\n\r\n    this.el.appendChild(el);\r\n    return this.makeWidget(el);\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(): GridStackWidget[] { return this.engine.save(); }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((w: GridStackWidget, add: boolean) => void)  = true) {\r\n    let items = GridStack.Utils.sort(layout);\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = this.engine.nodes.find(n => n.id === w.id);\r\n      if (item) {\r\n        this.update(item.el, w.x, w.y, w.width, w.height); // TODO: full update\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          addAndRemove(w, true);\r\n        } else {\r\n          this.addWidget('<div><div class=\"grid-stack-item-content\"></div></div>', w);\r\n        }\r\n      }\r\n    });\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto') {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    // or do entire grid and # of rows ? (this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('data-gs-current-row'))\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    let height = Utils.toNumber(el.getAttribute('data-gs-height'));\r\n    return Math.round(el.offsetHeight / height);\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridstackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val: numberOrString, update = true): GridStack {\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.height) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.height;\r\n\r\n    if (update) {\r\n      this._updateStyles();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell width.\r\n   */\r\n  public cellWidth(): number {\r\n    return this.el.offsetWidth / this.opts.column;\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  };\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [1-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param doNotPropagate if true existing widgets will not be updated (optional)\r\n   */\r\n  public column(column: number, doNotPropagate?: boolean): GridStack {\r\n    if (this.opts.column === column) { return this; }\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minWidth unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    if (doNotPropagate === true) { return this; }\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[] = undefined; // explicitly leave not defined\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => {\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes);\r\n\r\n    // and trigger our event last...\r\n    this._triggerChangeEvent(true); // skip layout update\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance.\r\n   * @param removeDOM if `false` grid and items elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    window.removeEventListener('resize', this._onResizeHandler);\r\n    this.disable();\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._class);\r\n      delete this.el.gridstack;\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    Utils.removeStylesheet(this._stylesId);\r\n    delete this.engine;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Disables widgets moving/resizing. This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack {\r\n    this.enableMove(false);\r\n    this.enableResize(false);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables widgets moving/resizing. This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack {\r\n    this.enableMove(true);\r\n    this.enableResize(true);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving.\r\n   *\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableDrag grid option (default: true).\r\n   */\r\n  public enableMove(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n    this.getGridItems().forEach(el => this.movable(el, doEnable));\r\n    if (includeNewWidgets) {\r\n      this.opts.disableDrag = !doEnable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableResize grid option (default: true).\r\n   */\r\n  public enableResize(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n    this.getGridItems().forEach(el => this.resizable(el, doEnable));\r\n    if (includeNewWidgets) {\r\n      this.opts.disableResize = !doEnable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    /*\r\n    if (val === undefined) {\r\n      // TODO: should we support and/or change signature ? figure this soon...\r\n      console.warn('gridstack.ts: getter `float()` is deprecated in 2.x and has been replaced by `getFloat()`. It will be **completely** removed soon');\r\n      return this.getFloat();\r\n    }\r\n    */\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.width} h: ${box.height}`)\r\n    let containerPos;\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('data-gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param width the width of to check\r\n   * @param height the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, width: number, height: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, width, height);\r\n  }\r\n\r\n  /**\r\n   * Locks/unlocks widget.\r\n   * @param el element or selector to modify.\r\n   * @param val if true widget will be locked.\r\n   */\r\n  public locked(els: GridStackElement, val: boolean): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n      node.locked = (val || false);\r\n      if (node.locked) {\r\n        el.setAttribute('data-gs-locked', 'yes');\r\n      } else {\r\n        el.removeAttribute('data-gs-locked');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" data-gs-width=\"3\"></div>');\r\n   * grid.makeWidget('gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = this.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Set the maxWidth for a widget.\r\n   * @param els widget or selector to modify.\r\n   * @param val A numeric value of the number of columns\r\n   */\r\n  public maxWidth(els: GridStackElement, val: number): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) { return }\r\n      node.maxWidth = (val || undefined);\r\n      if (val) {\r\n        el.setAttribute('data-gs-max-width', String(val));\r\n      } else {\r\n        el.removeAttribute('data-gs-max-width');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the minWidth for a widget.\r\n   * @param els widget or selector to modify.\r\n   * @param val A numeric value of the number of columns\r\n   */\r\n  public minWidth(els: GridStackElement, val: number): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) { return }\r\n      if (val) {\r\n        el.setAttribute('data-gs-min-width', String(val));\r\n      } else {\r\n        el.removeAttribute('data-gs-min-width');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the maxHeight for a widget.\r\n   * @param els widget or selector to modify.\r\n   * @param val A numeric value of the number of rows\r\n   */\r\n  public maxHeight(els: GridStackElement, val: number): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) { return }\r\n      if (val) {\r\n        el.setAttribute('data-gs-max-height', String(val));\r\n      } else {\r\n        el.removeAttribute('data-gs-max-height');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the minHeight for a widget.\r\n   * @param els widget or selector to modify.\r\n   * @param val A numeric value of the number of rows\r\n   */\r\n  public minHeight(els: GridStackElement, val: number): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) { return }\r\n      if (val) {\r\n        el.setAttribute('data-gs-min-height', String(val));\r\n      } else {\r\n        el.removeAttribute('data-gs-min-height');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables moving.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) { return }\r\n      node.noMove = !(val || false);\r\n      if (node.noMove) {\r\n        this.dd.draggable(el, 'disable');\r\n        el.classList.remove('ui-draggable-handle');\r\n      } else {\r\n        this.dd.draggable(el, 'enable');\r\n        el.classList.remove('ui-draggable-handle');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Changes widget position\r\n   * @param els  widget or singular selector to modify\r\n   * @param x new position x. If value is null or undefined it will be ignored.\r\n   * @param y new position y. If value is null or undefined it will be ignored.\r\n   */\r\n  public move(els: GridStackElement, x?: number, y?: number): GridStack {\r\n    this._updateElement(els, (el, node) => {\r\n      x = (x !== undefined) ? x : node.x;\r\n      y = (y !== undefined) ? y : node.y;\r\n\r\n      this.engine.moveNode(node, x, y, node.width, node.height);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public on(name: GridStackEvent, callback: (event: Event, arg2?: GridItemHTMLElement | GridStackNode[]) => void): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('gridstack.on(' + name + ') event not supported');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this.dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this.dd.draggable(n.el, 'destroy').resizable(n.el, 'destroy');\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Changes widget size\r\n   * @param els  widget or singular selector to modify\r\n   * @param width new dimensions width. If value is null or undefined it will be ignored.\r\n   * @param height  new dimensions height. If value is null or undefined it will be ignored.\r\n   */\r\n  public resize(els: GridStackElement, width?: number, height?: number): GridStack {\r\n    this._updateElement(els, (el, node) => {\r\n      width = (width || node.width);\r\n      height = (height || node.height);\r\n\r\n      this.engine.moveNode(node, node.x, node.y, width, height);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables resizing.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    this.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) { return; }\r\n      node.noResize = !(val || false);\r\n      if (node.noResize) {\r\n        this.dd.resizable(el, 'disable');\r\n      } else {\r\n        this.dd.resizable(el, 'enable');\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state. Also toggle the grid-stack-static class.\r\n   * @param staticValue if true the grid become static.\r\n   */\r\n  public setStatic(staticValue: boolean): GridStack {\r\n    this.opts.staticGrid = (staticValue === true);\r\n    this.enableMove(!staticValue);\r\n    this.enableResize(!staticValue);\r\n    this._setStaticClass();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size.\r\n   * @param els  widget or singular selector to modify\r\n   * @param x new position x. If value is null or undefined it will be ignored.\r\n   * @param y new position y. If value is null or undefined it will be ignored.\r\n   * @param width new dimensions width. If value is null or undefined it will be ignored.\r\n   * @param height  new dimensions height. If value is null or undefined it will be ignored.\r\n   */\r\n  public update(els: GridStackElement, x?: number, y?: number, width?: number, height?: number): GridStack {\r\n    this._updateElement(els, (el, node) => {\r\n      x = (x !== undefined) ? x : node.x;\r\n      y = (y !== undefined) ? y : node.y;\r\n      width = (width || node.width);\r\n      height = (height || node.height);\r\n\r\n      this.engine.moveNode(node, x, y, width, height);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridstackOptions.margin` for format options.\r\n   * @param value new vertical margin value\r\n   * Note: you can instead use `marginTop | marginBottom | marginLeft | marginRight` GridstackOptions to set the sides separately.\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let data = Utils.parseHeight(value);\r\n    if (this.opts.marginUnit === data.unit && this.opts.margin === data.height) {\r\n      return;\r\n    }\r\n    this.opts.marginUnit = data.unit;\r\n    this.opts.marginTop =\r\n    this.opts.marginBottom =\r\n    this.opts.marginLeft =\r\n    this.opts.marginRight =\r\n    this.opts.margin = data.height;\r\n    this._updateStyles();\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current vertical margin value */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param x new position x. If value is null or undefined it will be ignored.\r\n   * @param y new position y. If value is null or undefined it will be ignored.\r\n   * @param width new dimensions width. If value is null or undefined it will be ignored.\r\n   * @param height new dimensions height. If value is null or undefined it will be ignored.\r\n   * @param autoPosition if true then x, y parameters will be ignored and widget\r\n   * will be places on the first available position\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newNode.x, newNode.y, newNode.width, newNode.height, newNode.autoPosition)) {\r\n   *   grid.addWidget(newNode.el, newNode);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(x: number, y: number, width: number, height: number, autoPosition: boolean): boolean {\r\n    return this.engine.canBePlacedWithRespectToHeight({x, y, width, height, autoPosition});\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(skipLayoutChange?: boolean): GridStack {\r\n    if (this.engine.batchMode) { return this; }\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!skipLayoutChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this }\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this; }\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _initStyles(): GridStack {\r\n    if (this._stylesId) {\r\n      Utils.removeStylesheet(this._stylesId);\r\n    }\r\n    this._stylesId = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n    // insert style to parent (instead of 'head' by default) to support WebComponent\r\n    let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n    this._styles = Utils.createStylesheet(this._stylesId, styleLocation);\r\n    if (this._styles !== null) {\r\n      this._styles._max = 0;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(maxHeight?: number): GridStack {\r\n    if (!this._styles) {\r\n      return this;\r\n    }\r\n    if (maxHeight === undefined) {\r\n      maxHeight = this._styles._max;\r\n    }\r\n    this._initStyles();\r\n    this._updateContainerHeight();\r\n    if (!this.opts.cellHeight) { // The rest will be handled by CSS\r\n      return this;\r\n    }\r\n    if (this._styles._max !== 0 && maxHeight <= this._styles._max) { // Keep it increasing\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._class} > .${this.opts.itemClass}`;\r\n\r\n    // these are done once only\r\n    if (this._styles._max === 0) {\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._class} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    if (maxHeight > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxHeight; i++) { // start at 1\r\n        let height: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[data-gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[data-gs-height=\"${i}\"]`,     `height: ${height}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[data-gs-min-height=\"${i}\"]`, `min-height: ${height}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[data-gs-max-height=\"${i}\"]`, `max-height: ${height}`);\r\n      }\r\n      this._styles._max = maxHeight;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (this.engine.batchMode) { return this; }\r\n    let row = this.getRow(); // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow =  Math.round(cssMinHeight / this.getCellHeight());\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('data-gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) { return this }\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setupRemovingTimeout(el: GridItemHTMLElement): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node || node._removeTimeout || !this.opts.removable) return this;\r\n    node._removeTimeout = setTimeout(() => {\r\n      el.classList.add('grid-stack-item-removing');\r\n      node._isAboutToRemove = true;\r\n    }, this.opts.removeTimeout);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _clearRemovingTimeout(el: GridItemHTMLElement): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node || !node._removeTimeout) return this;\r\n    clearTimeout(node._removeTimeout);\r\n    delete node._removeTimeout;\r\n    el.classList.remove('grid-stack-item-removing');\r\n    delete node._isAboutToRemove;\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop **/\r\n  private _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n    let el = node.el;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event, ui) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n\r\n      this.engine.cleanNodes();\r\n      this.engine.beginUpdate(node);\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight();\r\n\r\n      let { target } = event;\r\n\r\n      this.placeholder.setAttribute('data-gs-x', target.getAttribute('data-gs-x'));\r\n      this.placeholder.setAttribute('data-gs-y', target.getAttribute('data-gs-y'));\r\n      this.placeholder.setAttribute('data-gs-width', target.getAttribute('data-gs-width'));\r\n      this.placeholder.setAttribute('data-gs-height', target.getAttribute('data-gs-height'));\r\n      this.el.append(this.placeholder);\r\n\r\n      node.el = this.placeholder;\r\n      node._beforeDragX = node.x;\r\n      node._beforeDragY = node.y;\r\n      node._prevYPix = ui.position.top;\r\n      let minHeight = (node.minHeight || 1);\r\n\r\n      // mineHeight - Each row is cellHeight + margin\r\n      this.dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minWidth || 1));\r\n      this.dd.resizable(el, 'option', 'minHeight', cellHeight * minHeight);\r\n\r\n      if (event.type === 'resizestart') {\r\n        let itemElement = target.querySelector('.grid-stack-item') as HTMLElement;\r\n        if (itemElement) {\r\n          let ev = document.createEvent('HTMLEvents');\r\n          ev.initEvent('resizestart', true, false);\r\n          itemElement.dispatchEvent(event);\r\n        }\r\n      }\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui) => {\r\n      let x = Math.round(ui.position.left / cellWidth);\r\n      let y = Math.floor((ui.position.top + cellHeight / 2) / cellHeight);\r\n      let width;\r\n      let height;\r\n\r\n      if (event.type === 'drag') {\r\n        let distance = ui.position.top - node._prevYPix;\r\n        node._prevYPix = ui.position.top;\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n        if (el.dataset.inTrashZone || x < 0 || x >= this.engine.column || y < 0 ||\r\n          (!this.engine.float && y > this.engine.getRow())) {\r\n          if (!node._temporaryRemoved) {\r\n            if (this.opts.removable === true) {\r\n              this._setupRemovingTimeout(el);\r\n            }\r\n\r\n            x = node._beforeDragX;\r\n            y = node._beforeDragY;\r\n\r\n            if (this.placeholder.parentNode === this.el) { this.el.removeChild(this.placeholder) }\r\n            this.engine.removeNode(node);\r\n            this._updateContainerHeight();\r\n\r\n            node._temporaryRemoved = true;\r\n          } else {\r\n            return;\r\n          }\r\n        } else {\r\n          this._clearRemovingTimeout(el);\r\n\r\n          if (node._temporaryRemoved) {\r\n            this.engine.addNode(node);\r\n            this._writeAttrs(this.placeholder, x, y, width, height);\r\n            this.el.appendChild(this.placeholder);\r\n            node.el = this.placeholder;\r\n            delete node._temporaryRemoved;\r\n          }\r\n        }\r\n      } else if (event.type === 'resize')  {\r\n        if (x < 0) return;\r\n        width = Math.round(ui.size.width / cellWidth);\r\n        height = Math.round((ui.size.height + this.getMargin()) / cellHeight);\r\n      }\r\n      // width and height are undefined if not resizing\r\n      let _lastTriedWidth = (width || node._lastTriedWidth);\r\n      let _lastTriedHeight = (height || node._lastTriedHeight);\r\n      if (!this.engine.canMoveNode(node, x, y, width, height) ||\r\n        (node._lastTriedX === x && node._lastTriedY === y &&\r\n        node._lastTriedWidth === _lastTriedWidth && node._lastTriedHeight === _lastTriedHeight)) {\r\n        return;\r\n      }\r\n      node._lastTriedX = x;\r\n      node._lastTriedY = y;\r\n      node._lastTriedWidth = width;\r\n      node._lastTriedHeight = height;\r\n      this.engine.moveNode(node, x, y, width, height);\r\n      this._updateContainerHeight();\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      if (this.placeholder.parentNode === this.el) { this.el.removeChild(this.placeholder) }\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify.dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n        delete el.gridstackNode; // hint we're removing it next and break circular link\r\n        gridToNotify._triggerRemoveEvent();\r\n        if (el.parentElement) {\r\n          el.remove(); // finally remove it\r\n        }\r\n      } else {\r\n        this._clearRemovingTimeout(el);\r\n        if (!node._temporaryRemoved) {\r\n          Utils.removePositioningStyles(target);\r\n          this._writeAttrs(target, node.x, node.y, node.width, node.height);\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          this._writeAttrs(target, node._beforeDragX, node._beforeDragY, node.width, node.height);\r\n          node.x = node._beforeDragX;\r\n          node.y = node._beforeDragY;\r\n          delete node._temporaryRemoved;\r\n          this.engine.addNode(node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n\r\n      this._updateContainerHeight();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n\r\n      // if we re-sized a nested grid item, let the children resize as well\r\n      if (event.type === 'resizestop') {\r\n        target.querySelectorAll('.grid-stack').forEach((el: GridHTMLElement) => el.gridstack._onResizeHandler());\r\n      }\r\n    }\r\n\r\n    this.dd\r\n      .draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      })\r\n      .resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n\r\n    if (node.noMove || this.opts.disableDrag || this.opts.staticGrid) {\r\n      this.dd.draggable(el, 'disable');\r\n    }\r\n\r\n    if (node.noResize || this.opts.disableResize || this.opts.staticGrid) {\r\n      this.dd.resizable(el, 'disable');\r\n    }\r\n\r\n    this._writeAttr(el, node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false): GridStack {\r\n    el.classList.add(this.opts.itemClass);\r\n    let node = this._readAttr(el, { el: el, grid: this });\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    el.gridstackNode = node;\r\n\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write x,y,w,h attributes back to element */\r\n  private _writeAttrs(el: HTMLElement, x?: number, y?: number, width?: number, height?: number): GridStack {\r\n    if (x !== undefined && x !== null) { el.setAttribute('data-gs-x', String(x)); }\r\n    if (y !== undefined && y !== null) { el.setAttribute('data-gs-y', String(y)); }\r\n    if (width) { el.setAttribute('data-gs-width', String(width)); }\r\n    if (height) { el.setAttribute('data-gs-height', String(height)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writeAttrs(el, node.x, node.y, node.width, node.height);\r\n\r\n    if (node.autoPosition) {\r\n      el.setAttribute('data-gs-auto-position', 'true');\r\n    } else {\r\n      el.removeAttribute('data-gs-auto-position');\r\n    }\r\n\r\n    if (node.minWidth) { el.setAttribute('data-gs-min-width', String(node.minWidth)); }\r\n    if (node.maxWidth) { el.setAttribute('data-gs-max-width', String(node.maxWidth)); }\r\n    if (node.minHeight) { el.setAttribute('data-gs-min-height', String(node.minHeight)); }\r\n    if (node.maxHeight) { el.setAttribute('data-gs-max-height', String(node.maxHeight)); }\r\n    if (node.noResize) {\r\n      el.setAttribute('data-gs-no-resize', 'true');\r\n    } else {\r\n      el.removeAttribute('data-gs-no-resize');\r\n    }\r\n\r\n    if (node.noMove) {\r\n      el.setAttribute('data-gs-no-move', 'true');\r\n    } else {\r\n      el.removeAttribute('data-gs-no-move');\r\n    }\r\n\r\n    if (node.locked) {\r\n      el.setAttribute('data-gs-locked', 'true');\r\n    } else {\r\n      el.removeAttribute('data-gs-locked');\r\n    }\r\n\r\n    if (node.resizeHandles) { el.setAttribute('data-gs-resize-handles', node.resizeHandles); }\r\n    if (node.id) { el.setAttribute('data-gs-id', String(node.id)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement, node: GridStackNode = {}): GridStackWidget {\r\n    node.x = Utils.toNumber(el.getAttribute('data-gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('data-gs-y'));\r\n    node.width = Utils.toNumber(el.getAttribute('data-gs-width'));\r\n    node.height = Utils.toNumber(el.getAttribute('data-gs-height'));\r\n    node.maxWidth = Utils.toNumber(el.getAttribute('data-gs-max-width'));\r\n    node.minWidth = Utils.toNumber(el.getAttribute('data-gs-min-width'));\r\n    node.maxHeight = Utils.toNumber(el.getAttribute('data-gs-max-height'));\r\n    node.minHeight = Utils.toNumber(el.getAttribute('data-gs-min-height'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('data-gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('data-gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('data-gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('data-gs-locked'));\r\n    node.resizeHandles = el.getAttribute('data-gs-resize-handles');\r\n    node.id = el.getAttribute('data-gs-id');\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateElement(els: GridStackElement, callback: (el: GridItemHTMLElement, node: GridStackNode) => void): GridStack {\r\n    let el = this.getElement(els);\r\n    if (!el) { return this; }\r\n    let node = el.gridstackNode;\r\n    if (!node) { return this; }\r\n\r\n    this.engine.cleanNodes();\r\n    this.engine.beginUpdate(node);\r\n\r\n    callback.call(this, el, node);\r\n\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n\r\n    this.engine.endUpdate();\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let staticClassName = 'grid-stack-static';\r\n\r\n    if (this.opts.staticGrid === true) {\r\n      this.el.classList.add(staticClassName);\r\n    } else {\r\n      this.el.classList.remove(staticClassName);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal called when we are being resized - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used.\r\n   */\r\n  private _onResizeHandler(): GridStack {\r\n    // make the cells content (minus margin) square again\r\n    if (this._isAutoCellHeight) {\r\n      Utils.throttle(() => {\r\n        let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n          + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n        this.cellHeight(this.cellWidth() + marginDiff);\r\n      }, 100);\r\n    }\r\n\r\n    if (!this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth) {\r\n      if (this._oneColumnMode) { return this }\r\n      this._oneColumnMode = true;\r\n      this.column(1);\r\n    } else {\r\n      if (!this._oneColumnMode) { return this }\r\n      delete this._oneColumnMode;\r\n      this.column(this._prevColumn);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to setup dragging in from the outside (say toolbar), with options */\r\n  private _setupDragIn():  GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.dragIn === 'string') {\r\n      if (!this.dd.isDraggable(this.opts.dragIn)) {\r\n        this.dd.dragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  private _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashZone = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashZone) return this;\r\n      if (!this.dd.isDroppable(trashZone)) {\r\n        this.dd.droppable(trashZone, this.opts.removableOptions);\r\n      }\r\n      this.dd\r\n        .on(trashZone, 'dropover', (event, el) => {\r\n          let node = el.gridstackNode;\r\n          if (!node || node.grid !== this) return;\r\n          el.dataset.inTrashZone = 'true';\r\n          this._setupRemovingTimeout(el);\r\n        })\r\n        .on(trashZone, 'dropout', (event, el) => {\r\n          let node = el.gridstackNode;\r\n          if (!node || node.grid !== this) return;\r\n          delete el.dataset.inTrashZone;\r\n          this._clearRemovingTimeout(el);\r\n        });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over support to support widgets */\r\n  private _setupAcceptWidget(): GridStack {\r\n    if (this.opts.staticGrid || !this.opts.acceptWidgets) return this;\r\n\r\n    let onDrag = (event, el: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      let pos = this.getCellFromPixel({left: event.pageX, top: event.pageY}, true);\r\n      let x = Math.max(0, pos.x);\r\n      let y = Math.max(0, pos.y);\r\n      if (!node._added) {\r\n        node._added = true;\r\n\r\n        node.el = el;\r\n        node.x = x;\r\n        node.y = y;\r\n        delete node.autoPosition;\r\n        this.engine.cleanNodes();\r\n        this.engine.beginUpdate(node);\r\n        this.engine.addNode(node);\r\n\r\n        this._writeAttrs(this.placeholder, node.x, node.y, node.width, node.height);\r\n        this.el.appendChild(this.placeholder);\r\n        node.el = this.placeholder; // dom we update while dragging...\r\n        node._beforeDragX = node.x;\r\n        node._beforeDragY = node.y;\r\n\r\n        this._updateContainerHeight();\r\n      } else if ((x !== node.x || y !== node.y) && this.engine.canMoveNode(node, x, y)) {\r\n        this.engine.moveNode(node, x, y);\r\n        this._updateContainerHeight();\r\n      }\r\n    };\r\n\r\n    this.dd\r\n      .droppable(this.el, {\r\n        accept: (el: GridItemHTMLElement) => {\r\n          let node: GridStackNode = el.gridstackNode;\r\n          if (node && node.grid === this) {\r\n            return false;\r\n          }\r\n          if (typeof this.opts.acceptWidgets === 'function') {\r\n            return this.opts.acceptWidgets(el);\r\n          }\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          return el.matches(selector);\r\n        }\r\n      })\r\n      .on(this.el, 'dropover', (event, el: GridItemHTMLElement) => {\r\n        let width, height;\r\n\r\n        // see if we already have a node with widget/height and check for attributes\r\n        let node = el.gridstackNode;\r\n        if (!node || !node.width || !node.height) {\r\n          let w = parseInt(el.getAttribute('data-gs-width'));\r\n          if (w > 0) { node = node || {}; node.width = w; }\r\n          let h = parseInt(el.getAttribute('data-gs-height'));\r\n          if (h > 0) { node = node || {}; node.height = h; }\r\n        }\r\n\r\n        // if not calculate the grid size based on element outer size\r\n        let cellWidth = this.cellWidth();\r\n        let cellHeight = this.getCellHeight();\r\n        width = node && node.width ? node.width : Math.round(el.offsetWidth / cellWidth) || 1;\r\n        height = node && node.height ? node.height : Math.round(el.offsetHeight / cellHeight) || 1;\r\n\r\n        let newNode = this.engine.prepareNode({width, height, _added: false, _temporary: true});\r\n        newNode._isOutOfGrid = true;\r\n        el.gridstackNode = newNode;\r\n        el._gridstackNodeOrig = node;\r\n\r\n        this.dd.on(el, 'drag', onDrag);\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement) => {\r\n        // jquery-ui bug. Must verify widget is being dropped out\r\n        // check node variable that gets set when widget is out of grid\r\n        let node = el.gridstackNode;\r\n        if (!node || !node._isOutOfGrid) {\r\n          return;\r\n        }\r\n        this.dd.off(el, 'drag');\r\n        node.el = null;\r\n        this.engine.removeNode(node);\r\n        if (this.placeholder.parentNode === this.el) {\r\n          this.el.removeChild(this.placeholder);\r\n        }\r\n        this._updateContainerHeight();\r\n        el.gridstackNode = el._gridstackNodeOrig;\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        this.placeholder.remove();\r\n\r\n        // notify of removal from prev grid...\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (origNode && origNode.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.placeholder.remove();\r\n          origNode.el = el; // was using placeholder, have it point to node we've moved instead\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent();\r\n        }\r\n\r\n        let node: GridStackNode = el.gridstackNode; // use existing placeholder node as it's already in our list with drop location\r\n        this.engine.cleanupNode(node); // remove all internal _xyz values\r\n        node.grid = this;\r\n        this.dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by default (by jqueryui and here to make it the same)\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this.dd\r\n            .draggable(el, 'destroy')\r\n            .resizable(el, 'destroy');\r\n        }\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n\r\n        Utils.removePositioningStyles(el);\r\n        this._writeAttr(el, node);\r\n        this.el.appendChild(el);\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);\r\n        this._triggerAddEvent();\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        // IFF we are still there (soe application will use as placeholder and insert their real widget instead)\r\n        window.setTimeout(() => {\r\n          if (node.el && node.el.parentElement) this._prepareDragDropByNode(node);\r\n        });\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement {\r\n    return (typeof els === 'string' ?\r\n      (document.querySelector(els) || document.querySelector('#' + els) || document.querySelector('.' + els)) : els);\r\n  }\r\n  /** @internal */\r\n  private getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length) { list = document.querySelectorAll('.' + els) }\r\n      if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      return Array.from(list) as GridItemHTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n  /** @internal */\r\n  private static getGridElement(els: string | HTMLElement = '.grid-stack'): GridHTMLElement {\r\n    return (typeof els === 'string' ?\r\n      (document.querySelector(els) || document.querySelector('#' + els) || document.querySelector('.' + els)) : els);\r\n  }\r\n  /** @internal */\r\n  private static getGridElements(els: string | HTMLElement = '.grid-stack'): GridHTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length) { list = document.querySelectorAll('.' + els) }\r\n      if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      return Array.from(list) as GridHTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n    let data = Utils.parseHeight(this.opts.margin);\r\n    this.opts.marginUnit = data.unit;\r\n    let margin = this.opts.margin = data.height;\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.height;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.height;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.height;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.height;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    return this;\r\n  }\r\n\r\n  // legacy method renames\r\n  /** @internal */\r\n  private setGridWidth = obsolete(this, GridStack.prototype.column, 'setGridWidth', 'column', 'v0.5.3');\r\n  /** @internal */\r\n  private setColumn = obsolete(this, GridStack.prototype.column, 'setColumn', 'column', 'v0.6.4');\r\n  /** @internal */\r\n  private getGridHeight =  obsolete(this, GridStackEngine.prototype.getRow, 'getGridHeight', 'getRow', 'v1.0.0');\r\n}\r\n"]}